Notas de setup general
en general, estas siguiendo esto
https://docs.cucumber.io/guides/10-minute-tutorial/


----------------------------------------------------------------------
GitLab
- te creaste una cuenta.
- Seteaste una SSH Key pair
	https://monica.mcmxi.services/help/ssh/README#generating-a-new-ssh-key-pair

Java
- Instalaste java

maven
- instalaste mvn


para crear un proyecto basico con cucumber y selenium
1) ----------------------------------------------------------------
desde la consola, creaste el proyecto de cucumber con este comando
mvn archetype:generate -DarchetypeGroupId=io.cucumber -DarchetypeArtifactId=cucumber-archetype -DarchetypeVersion=2.3.1.2 -DgroupId=AAA -DartifactId=BBB -Dpackage=CCC -Dversion=1.0.0-SNAPSHOT -DinteractiveMode=false

2) ----------------------------------------------------------------
al pom le agregas estas dependencias:
<dependency>
	<groupId>org.assertj</groupId>
	<artifactId>assertj-core</artifactId>
	<version>1.7.0</version>
	<scope>test</scope>
</dependency>
<dependency>
	<groupId>org.seleniumhq.selenium</groupId>
	<artifactId>selenium-server</artifactId>
	<version>3.0.1</version>
</dependency>
fijate que las dos dependencias de io.cucumber sean la ultima version (4.1.1 o superior)
dentro de build, plugins:

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <configuration>
        <useSystemClassLoader>false</useSystemClassLoader>
        <testFailureIgnore>true</testFailureIgnore>
    </configuration>
</plugin>
<plugin>
    <groupId>com.googlecode.maven-download-plugin</groupId>
    <artifactId>download-maven-plugin</artifactId>
    <version>1.3.0</version>
    <executions>
        <execution>
            <id>chromedriver_linux64</id>
            <phase>initialize</phase>
            <goals>
                <goal>wget</goal>
            </goals>
            <configuration>
                <url>https://chromedriver.storage.googleapis.com/2.44/chromedriver_linux64.zip</url>
                <unpack>true</unpack>
                <outputDirectory>${basedir}/src/main/resources/chromedriver_linux64</outputDirectory>
            </configuration>
        </execution>
    </executions>
</plugin>

VER QUE MAS QUEDA DESPUES DE QUE PRUEBES UNO POR UNO, SACANDOLOS

3) ----------------------------------------------------------------
una vez tenes el pom actualizado, a la derecha, arriba, tenes un logito de Maven. Dos opciones:
Reimport all maven projects
Generate sources and Update folders...
luego, en la raiz del proyecto: "synchronize [nombre del proyecto]"
esto deberia bajarte el web driver y ponerlo en la carpeta src/main/resources
la carpeta resources del main, click derecho: Mark directory as: Resources root
este paso no esta uncionando bien, quizas por estar mal definido el pom. por ahora, bajalo a mano y pegalo en su carpeta bajo resources

4) ----------------------------------------------------------------
el archivo RunCucumberTest, reemplazar:
@CucumberOptions(plugin = {"pretty"})
por
@CucumberOptions(plugin = {"pretty", "html:target/Destination"})
para que genere los reportes en
target/destination

5)  ----------------------------------------------------------------
el archivo StepDefs.java deberia quedar mas o menos asi (requiere refactor para prolijidad)
package com.opskins.feautomation;

import cucumber.api.java.After;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.When;
import cucumber.api.java.en.Then;
import org.apache.commons.lang3.SystemUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;

import static org.junit.Assert.*;

class DayInformer {
    static String isIt(String dayToAskAbout, String today) {
        if(today.equals(dayToAskAbout)){
            return "Yes!";
        }else{
            return "No!";
        }

    }
}

public class Stepdefs {
    private String today;
    private String actualAnswer;
    private WebDriver driver;

    @Given("^today is \"([^\"]*)\"$")
    public void today_is_(String day) {
        this.today = day;
    }

    @When("^I ask whether it's Friday yet$")
    public void i_ask_whether_is_s_Friday_yet() {
        this.actualAnswer = DayInformer.isIt("Friday", today);
    }

    @When("^I ask whether it's Saturday yet$")
    public void i_ask_whether_is_s_Saturday_yet() {
        this.actualAnswer = DayInformer.isIt("Saturday", today);
    }

    @Then("^I should be told \"([^\"]*)\"$")
    public void i_should_be_told(String expectedAnswer) {
        assertEquals(expectedAnswer, actualAnswer);
    }





    @Given("^I am on the Google search page$")
    public void I_visit_google() throws Exception{
        driver = WebDriverFactory.getDriver();
        driver.get("https:\\www.google.com");
        driver.manage().window().maximize();
    }

    @When("^I search for \"(.*)\"$")
    public void search_for(String query) {
        WebElement element = driver.findElement(By.name("q"));
        // Enter something to search for
        element.sendKeys(query);
        // Now submit the form. WebDriver will find the form for us from the element
        element.submit();
    }

    @Then("^the page title should start with \"(.*)\"$")
    public void checkTitle(String titleStartsWith) {
        // Google's search is rendered dynamically with JavaScript
        // Wait for the page to load timeout after ten seconds
        new WebDriverWait(driver,10L).until(new ExpectedCondition<Boolean>() {
            public Boolean apply(WebDriver d) {
                return d.getTitle().toLowerCase().startsWith("cheese");
                // Should see: "cheese! -Google Search"
            }
        });
    }

    @After()
    public void closeBrowser() {
        driver.quit();
    }
}

class WebDriverFactory {

    /**
     * Put the desired driver into the proper system path, so that Fluentlenium can link to the browser.
     * @throws Exception
     */
    public static void setChromeDriver() throws Exception {
        String WINDOWS_PATH = "chromedriver_win32/chromedriver.exe";
        String LINUX_PATH = "chromedriver_linux64/chromedriver";

        if (SystemUtils.IS_OS_WINDOWS) {
            System.setProperty("webdriver.chrome.driver",
                    WebDriverFactory.class.getClassLoader().getResource(WINDOWS_PATH).getPath());
        } else if (SystemUtils.IS_OS_LINUX) {
            System.setProperty("webdriver.chrome.driver",
                    WebDriverFactory.class.getClassLoader().getResource(LINUX_PATH).getPath());
        } else {
            throw new Exception("OS not supported");
        }
    }

    public static WebDriver getDriver() throws Exception{
        setChromeDriver();
        return new ChromeDriver();
    }
}

6) ----------------------------------------------------------------
bajo src/test/resources/com/opskins/feautomation
crea un archivo de nombre find_some_cheese.feature con lo siguiente
Feature: Navegar por Google un poco

  Scenario: Finding some cheese
    Given I am on the Google search page
    When I search for "Cheese!"
    Then the page title should start with "cheese"

7) 
correr RunCucumberTest para verificar que anda todo








despues de tener un esqueleto del framework, lo subiste gitlab. la misma pagina tiene instrucciones y te va guiando.

fijate el tema de la ruta. el doc te dice que ejecutes este comando

	git remote add origin git@monica.mcmxi.services:quality-assurance/cuckoo.git

pero no funciona cuando queres pushear cosas. tuviste que hacerlo asi:

	git remote add origin ssh://git@monica.mcmxi.services:2259/quality-assurance/cuckoo.git

